{"version":3,"sources":["index.js"],"names":["Dancer","update","unit","props","group","refs","roundX","Math","round","x","roundY","y","id","ref","draggable","onDragEnd","this","radius","fill","text","name","width","height","align","verticalAlign","React","Component","AddDancerSection","addDancer","dancerName","value","setState","validName","state","errorMessage","className","onClick","Sidebar","dancerInfo","formation","dancers","key","push","addToFormation","Canvas","updateDancer","gridComponents","i","points","stroke","strokeWidth","opacity","Object","assign","dancersComponents","FormationTimeline","event","previousIndex","nextIndex","fromId","toId","setFormOrder","reorder","formationOrder","list","reorderImmutable","lists","reorderFromToImmutable","from","to","reorderId","reorderGroup","component","placeholderClassName","draggedClassName","lock","holdTime","onReorder","bind","autoScroll","map","item","setCurrentForm","App","formations","currentFormId","defaultPos","trim","toLowerCase","currentId","nextId","toString","newFormOrder","addFormation","nextFormId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f40468bb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Konva from \"konva\";\nimport ReactDOM from \"react-dom\";\nimport { Stage, Layer, Rect, Circle, Group, Text, Line } from \"react-konva\";\nimport './index.css';\nimport Reorder, { reorder, reorderImmutable, reorderFromTo, reorderFromToImmutable } from 'react-reorder';\n\nclass Dancer extends React.Component {\n    update = () => {\n        const unit = this.props.unit;\n        var group = this.refs.group;\n        const roundX = unit * Math.round(group.x() / unit);\n        const roundY = unit * Math.round(group.y() / unit);\n        group.x(roundX);\n        group.y(roundY);\n        this.props.update(this.props.id, group.x(), group.y());\n    }\n    render() {\n        return (\n            <Group\n            ref='group'\n            draggable\n            onDragEnd={this.update}\n            x={this.props.x}\n            y={this.props.y}\n            >\n                <Circle \n                    ref='circle'\n                    x={0}\n                    y={0}\n                    radius={20}\n                    fill=\"red\"\n                />\n                <Text \n                    text={this.props.name}\n                    x={-20}\n                    y={-10}\n                    width={40}\n                    height={20}\n                    align='center'\n                    verticalAlign='middle'\n                />\n            </Group>\n        );\n    }\n}\n\nclass AddDancerSection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            validName: true,\n        };\n    }\n    \n    addDancer = () => {\n        const name = this.refs.dancerName.value;\n        if (this.props.addDancer(name) === false) {\n            this.setState({\n                validName: false,\n            });\n        } else {\n            this.setState({\n                validName: true,\n            });\n            this.refs.dancerName.value = '';\n        }\n    }\n\n    render() {\n        var errorMessage = null;\n        if (!this.state.validName) {\n            errorMessage = 'Error: Blank or duplicate dancer name';\n        }\n        return(\n            <div className='dancer-section'>\n                <div>\n                    <label>Dancer Name:</label>\n                    <input name=\"dancer_name\" ref='dancerName' />\n                </div>\n                <div>\n                    <button onClick={this.addDancer}>\n                        Add Dancer\n                    </button>\n                </div>\n                <div>\n                    {errorMessage}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Sidebar extends React.Component {\n    render() {\n        var dancerInfo = [];\n        let formation = this.props.formation;\n        let dancers = this.props.dancers;\n        for (let key in dancers) {\n            if (formation[key]) {\n                dancerInfo.push(<li>{dancers[key] + ': (' + formation[key]['x'] + ', ' + formation[key]['y'] + ')'}</li>)\n            } else {\n                dancerInfo.push(<li>{dancers[key] + ': N/A'}<button onClick={() => this.props.addToFormation(key)}>Add To Formation</button></li>)\n            }\n        }\n        // for (key in dancers) {\n        //     text = text + 'Id: ' + key + ' x: ' + dancers[key]['x']\n        // }\n        return (\n            <div className='sidebar'>\n                <div className='text-div'>\n                    <ul>\n                        {dancerInfo}\n                    </ul>\n                </div>\n                <AddDancerSection addDancer={this.props.addDancer}/>\n            </div>\n        );\n    }\n}\n\nclass Canvas extends React.Component {\n\n    updateDancer = (id, x, y) => {\n        const unit = this.props.unit;\n        const roundX = unit * Math.round(x / unit);\n        const roundY = unit * Math.round(y / unit);\n        this.props.update(id, roundX, roundY);\n    }\n\n    render() {\n        const unit = this.props.unit;\n        const width = this.props.width;\n        const height = this.props.height;\n        var gridComponents = [];\n        for (let i = unit; i < width; i += unit) {\n            gridComponents.push(<Line points={[i, 0, i, height]} stroke={'grey'} strokeWidth={2} opacity={.2} />);\n        }\n        for (let i = unit; i < height; i += unit) {\n            gridComponents.push(<Line points={[0, i, width, i]} stroke={'grey'} strokeWidth={2} opacity={.2} />)\n        }\n        const formation = Object.assign({}, this.props.formation);\n        const dancers = Object.assign({}, this.props.dancers);\n        var dancersComponents = [];\n        for (let key in formation) {\n            dancersComponents.push(<Dancer id={key} name={dancers[key]} x={formation[key]['x']} y={formation[key]['y']} update={this.props.update} unit={this.props.unit} />);\n        }\n        return(\n            <Stage className='stage' width={this.props.width} height={this.props.height}>\n                <Layer>\n                    {gridComponents}\n                    {dancersComponents}\n                </Layer>\n            </Stage>\n        );\n    }\n}\n\nclass FormationTimeline extends React.Component {\n\n    onReorder(event, previousIndex, nextIndex, fromId, toId) {\n        this.props.setFormOrder(reorder(this.props.formationOrder, previousIndex, nextIndex));\n    }\n\n    onReorderGroup(event, previousIndex, nextIndex, fromId, toId) {\n        if (fromId === toId) {\n            const list = reorderImmutable(this.state[fromId], previousIndex, nextIndex);\n\n            this.setState({\n                [fromId]: list\n            });\n        } else {\n            const lists = reorderFromToImmutable({\n                from: this.state[fromId],\n                to: this.state[toId]\n            }, previousIndex, nextIndex);\n\n            this.setState({\n                [fromId]: lists.from,\n                [toId]: lists.to\n            });\n        }\n    }\n\n    render() {\n        return(\n            <Reorder\n                className=\"timeline\"\n                reorderId=\"formations-list\" // Unique ID that is used internally to track this list (required)\n                reorderGroup=\"formations-group\" // A group ID that allows items to be dragged between lists of the same group (optional)\n                component=\"div\" // Tag name or Component to be used for the wrapping element (optional), defaults to 'div'\n                placeholderClassName=\"placeholder\" // Class name to be applied to placeholder elements (optional), defaults to 'placeholder'\n                draggedClassName=\"dragged\" // Class name to be applied to dragged elements (optional), defaults to 'dragged'\n                lock=\"vertical\" // Lock the dragging direction (optional): vertical, horizontal (do not use with groups)\n                holdTime={500} // Default hold time before dragging begins (mouse & touch) (optional), defaults to 0\n                onReorder={this.onReorder.bind(this)} // Callback when an item is dropped (you will need this to update your state)\n                autoScroll={true} // Enable auto-scrolling when the pointer is close to the edge of the Reorder component (optional), defaults to true\n            >\n                {\n                    this.props.formationOrder.map((item) => (\n                        <div onClick={() => {this.props.setCurrentForm(item)}} className='timeline-formation' key={item}>\n                            {item}\n                        </div>\n                    ))\n                }\n            </Reorder>\n        );\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            formations: {\n                '0': {},\n                '1': {},\n                '2': {},\n            },\n            dancers: {},\n            formationOrder: ['0', '1', '2'],\n            nextId: 0,\n            nextFormId: 3,\n            currentFormId: '0',\n        };\n    }\n\n    defaultPos() {\n        return ({x: 40, y: 40})\n    }\n\n    updateDancer = (id, x, y) => {\n        let formations = Object.assign({}, this.state.formations);\n        formations[this.state.currentFormId][id] = {\n            x: x,\n            y: y,\n        };\n        this.setState({\n            formations: formations,\n        });\n    }\n\n    addToFormation = (id) => {\n        let formations = Object.assign({}, this.state.formations);\n        if (!formations[this.state.currentFormId][id]) {\n            formations[this.state.currentFormId][id] = this.defaultPos();\n        }\n        this.setState({\n            formations: formations,\n        });\n    }\n\n    addDancer = (name) => {\n        name = name.trim();\n        if (name === null || name === '') {\n            return false;\n        }\n        let dancers = Object.assign({}, this.state.dancers);\n        for (let key in dancers) {\n            if (dancers[key].toLowerCase() === name.toLowerCase()) {\n                return false;\n            }\n        }\n        const currentId = this.state.nextId;\n        dancers[currentId.toString()] = name;\n        this.setState({\n            dancers: dancers,\n            nextId: (currentId + 1)\n        });\n        return true;\n    }\n\n    setCurrentForm = (id) => {\n        this.setState({\n            currentFormId: id,\n        });\n    }\n\n    setFormOrder = (newFormOrder) => {\n        this.setState({\n            formationOrder: newFormOrder,\n        });\n    }\n\n    addFormation = ()=> {\n        let formations = Object.assign({}, this.state.formations);\n        let formationOrder = Object.assign([], this.state.formationOrder);\n        formations[this.state.nextFormId.toString()] = {};\n        formationOrder.push(this.state.nextFormId.toString());\n        this.setState({\n            formations: formations,\n            formationOrder: formationOrder,\n            nextFormId: this.state.nextFormId + 1,\n        })\n    }\n\n    render() {\n        return (\n            <div className='outerDiv'>\n                <div className='upperDiv'>\n                    <Canvas dancers={this.state.dancers} formation={this.state.formations[this.state.currentFormId]} update={this.updateDancer} width={600} height={600} unit={40} />\n                    <Sidebar addToFormation={this.addToFormation} dancers={this.state.dancers} formation={this.state.formations[this.state.currentFormId]} addDancer={this.addDancer} />\n                </div>\n                <div className='lowerDiv'>\n                    <FormationTimeline setCurrentForm={this.setCurrentForm} setFormOrder={this.setFormOrder} formationOrder={this.state.formationOrder} currentFormId={this.state.currentFormId} />\n                    <div>\n                        {'Current Formation: ' + this.state.currentFormId}\n                    </div>\n                    <div>\n                        <button onClick={this.addFormation}>\n                            Add Formation\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// Anime.js"],"sourceRoot":""}